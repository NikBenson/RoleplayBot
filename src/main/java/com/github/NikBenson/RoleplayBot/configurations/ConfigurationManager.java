package com.github.NikBenson.RoleplayBot.configurations;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.Guild;
import org.jetbrains.annotations.NotNull;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;

public class ConfigurationManager {
	private static ConfigurationManager instance;

	public static ConfigurationManager setInstance(JDA jda, String configurationRootPath) throws IOException {
		instance = new ConfigurationManager(jda, configurationRootPath);

		return  getInstance();
	}
	public static ConfigurationManager getInstance() {
		return instance;
	}

	public static Object readJSONFromFile(@NotNull File file) throws IOException, ParseException {
		String jsonString = Files.readString(Path.of(file.getPath()));

		return new JSONParser().parse(jsonString);
	}
	public static JSONObject readJSONFromDirectory(@NotNull File file) {
		JSONObject all = new JSONObject();

		if (file.exists()) {
			for (File messageFile : file.listFiles()) {
				try {
					all.put(file.getName(), readJSONFromFile(messageFile));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return all;
	}

	private final JDA JDA;

	private final String configurationRootPath;
	private final String autogeneratedConfigurationRootPath;

	private final List<JSONConfigured> allJSONConfigured = new LinkedList<>();

	private ConfigurationManager(JDA JDA, String configurationRootPath) throws IOException {
		this.JDA = JDA;

		this.configurationRootPath = configurationRootPath;
		autogeneratedConfigurationRootPath = getAndCreateAutogeneratedConfigRoot();
	}

	private String getAndCreateAutogeneratedConfigRoot() throws IOException {
		File autogeneratedConfig = new File(configurationRootPath, ConfigurationPaths.Autogenerated.ROOT);
		if(!autogeneratedConfig.exists()) {
			Files.createDirectory(autogeneratedConfig.toPath());
		}

		return autogeneratedConfig.getPath();
	}

	public void registerConfiguration(JSONConfigured jsonConfigured) {
		allJSONConfigured.add(jsonConfigured);
	}

	public File getConfigurationRootPath(Guild guild) {
		return new File(new File(configurationRootPath, ConfigurationPaths.GUILDS_DIRECTORY), guild.getId());
	}
	public File getAutogeneratedConfigurationRootPath(Guild guild) {
		return new File(new File(autogeneratedConfigurationRootPath, ConfigurationPaths.GUILDS_DIRECTORY), guild.getId());
	}

	public void loadAll() {
		for(JSONConfigured configured : allJSONConfigured) {
			try {
				load(configured);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void load(JSONConfigured loadable) throws IOException, ParseException {
		File configPath = loadable.getConfigPath();
		if(configPath.isDirectory()) {
			loadable.loadFromJSON(readJSONFromDirectory(loadable.getConfigPath()));
		} else {
			loadable.loadFromJSON((JSONObject) readJSONFromFile(loadable.getConfigPath()));
		}
	}

	public void saveAll() {
		for(JSONConfigured configured : allJSONConfigured) {
			try {
				save(configured);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void save(JSONConfigured savable) throws IOException {
		if(savable.getConfigPath().isDirectory()) {
			saveDirectory(savable);
		} else {
			JSONObject json = savable.getJSON();

			if (json != null) {
				saveFile(savable.getConfigPath(), json.toJSONString());
			}
		}
	}
	public void saveDirectory(JSONConfigured savable) throws IOException {
		JSONObject all = savable.getJSON();

		if(all != null) {
			for (Object current : all.keySet()) {
				File file = new File(savable.getConfigPath(), (String) current);

				saveFile(file, (String) all.get(current));
			}
		}
	}
	private void saveFile(File file, String content) throws IOException {
		if (!file.exists()) {
			file.createNewFile();
		}

		Files.writeString(file.toPath(), content);

	}
}
