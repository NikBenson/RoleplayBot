package com.github.NikBenson.RoleplayBot.users;

import com.github.NikBenson.RoleplayBot.configurations.ConfigurationManager;
import com.github.NikBenson.RoleplayBot.configurations.ConfigurationPaths;
import com.github.NikBenson.RoleplayBot.configurations.JSONConfigured;
import com.github.NikBenson.RoleplayBot.configurations.ModulesManager;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.guild.member.GuildMemberJoinEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.hooks.SubscribeEvent;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class PlayerManager extends ListenerAdapter implements JSONConfigured {
	private static PlayerManager instance;

	public static PlayerManager createInstance(JDA jda) {
		instance = new PlayerManager(jda);

		return getInstance();
	}
	public static PlayerManager getInstance() {
		return instance;
	}

	Map<String, Player> players = new HashMap<>();

	private PlayerManager(JDA jda) {
		jda.addEventListener(this);

		ModulesManager.registerModule("players", this);
	}

	public Player getPlayerOrCreate(User user) {
		if(!players.containsKey(user.getId())) {
			players.put(user.getId(), new Player(user));
		}

		return players.get(user.getId());
	}

	@SubscribeEvent
	@Override
	public void onGuildMemberJoin(GuildMemberJoinEvent event) {
		User user = event.getUser();

		if(!user.isBot()) {
			getPlayerOrCreate(user);
		}
	}

	@Override
	public JSONObject getJSON() {
		JSONArray playersJson = new JSONArray();

		for(String user : players.keySet()) {
			Player player = players.get(user);
			playersJson.add(player.getJSON());
		}

		JSONObject json = new JSONObject();

		json.put("players", playersJson);

		return json;
	}

	@Override
	public File getConfigPath() {
		return new File(ConfigurationManager.getInstance().getAutogeneratedConfigurationRootPath(), ConfigurationPaths.Autogenerated.PLAYERS_FILE);
	}

	@Override
	public void loadFromJSON(JSONObject json) {
		JSONArray playersJson = (JSONArray) json.get("players");

		for (int i = 0; i < playersJson.size(); i++) {
			JSONObject currentJson = (JSONObject) playersJson.get(i);

			String userId = (String) currentJson.get("id");
			Player currentPlayer = new Player(currentJson);

			players.put(userId, currentPlayer);
		}
	}
}
