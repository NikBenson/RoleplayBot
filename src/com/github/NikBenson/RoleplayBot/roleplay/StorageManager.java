package com.github.NikBenson.RoleplayBot.roleplay;

import com.github.NikBenson.RoleplayBot.configurations.ConfigurationManager;
import com.github.NikBenson.RoleplayBot.configurations.ConfigurationPaths;
import com.github.NikBenson.RoleplayBot.configurations.JSONConfigured;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.json.simple.JSONObject;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class StorageManager extends ListenerAdapter implements JSONConfigured {
	private static StorageManager instance;

	public static void createInstance(JDA jda) {
		if(instance == null) {
			instance = new StorageManager(jda);
		}
	}
	public static StorageManager getInstance() {
		return instance;
	}

	private final JDA JDA;

	private Map<TextChannel, Map<String, Long>> storages = new HashMap<>();

	private StorageManager(JDA jda) {
		JDA = jda;
		jda.addEventListener(this);

		ConfigurationManager configurationManager = ConfigurationManager.getInstance();
		configurationManager.registerConfiguration(this);
		try {
			configurationManager.load(this);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public long addTo(TextChannel channel, String item) {
		Map<String, Long> storage = getStorageOrCreateFrom(channel);

		if(storage.containsKey(item)) {
			storage.replace(item, storage.get(item) + 1);
		} else {
			storage.put(item, 1l);
		}

		return storage.get(item);
	}

	public boolean takeFrom(TextChannel channel, String item) {
		Map<String, Long> storage = getStorageOrCreateFrom(channel);

		if(storage.containsKey(item)) {
			storage.replace(item, storage.get(item) - 1);

			if(storage.get(item) <= 0) {
				storage.remove(item);
			}

			return true;
		}

		return false;
	}

	public Map<String, Long> getStorageFrom(TextChannel channel) {
		return getStorageOrCreateFrom(channel);
	}
	public long getStorageFrom(TextChannel channel, String item) {
		return getStorageOrCreateFrom(channel).getOrDefault(item, 0l);
	}

	private Map<String, Long> getStorageOrCreateFrom(TextChannel channel) {
		if(!storages.containsKey(channel)) {
			storages.put(channel, new JSONObject());
		}

		return storages.get(channel);
	}

	@Override
	public JSONObject getJSON() {
		JSONObject storagesJson = new JSONObject();

		for(TextChannel channel : storages.keySet()) {
			JSONObject storageJson = (JSONObject) storages.get(channel);

			storagesJson.put(channel.getId(), storageJson);
		}

		return storagesJson;
	}

	@Override
	public File getConfigPath() {
		return new File(ConfigurationManager.getInstance().getAutogeneratedConfigurationRootPath(), ConfigurationPaths.Autogenerated.STORAGE_FILE);
	}

	@Override
	public void loadFromJSON(JSONObject json) {
		for(Object channelId : json.keySet()) {
			TextChannel channel = JDA.getTextChannelById((String) channelId);

			Map<String, Long> storage = (Map<String, Long>) json.get(channelId);

			storages.put(channel, storage);
		}
	}
}
