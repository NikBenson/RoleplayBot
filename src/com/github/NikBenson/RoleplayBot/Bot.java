package com.github.NikBenson.RoleplayBot;

import com.github.NikBenson.RoleplayBot.commands.context.privateMessage.CancelCharacter;
import com.github.NikBenson.RoleplayBot.commands.context.privateMessage.CreateCharacter;
import com.github.NikBenson.RoleplayBot.commands.context.server.Shutdown;
import com.github.NikBenson.RoleplayBot.commands.context.server.Storage;
import com.github.NikBenson.RoleplayBot.messages.MessageFormatter;
import com.github.NikBenson.RoleplayBot.messages.RepeatedMessage;
import com.github.NikBenson.RoleplayBot.messages.WelcomeMessenger;
import com.github.NikBenson.RoleplayBot.commands.*;
import com.github.NikBenson.RoleplayBot.commands.context.GeneralContext;
import com.github.NikBenson.RoleplayBot.commands.context.general.*;
import com.github.NikBenson.RoleplayBot.commands.context.user.PlayerName;
import com.github.NikBenson.RoleplayBot.roleplay.GameManager;
import com.github.NikBenson.RoleplayBot.roleplay.StorageManager;
import com.github.NikBenson.RoleplayBot.serverCommands.CommandManager;
import com.github.NikBenson.RoleplayBot.users.PlayerManager;
import com.github.NikBenson.RoleplayBot.roleplay.Character;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.requests.GatewayIntent;
import net.dv8tion.jda.api.utils.Compression;
import net.dv8tion.jda.api.utils.cache.CacheFlag;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

import javax.security.auth.login.LoginException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import static com.github.NikBenson.RoleplayBot.json.JSONFileReader.getJson;

public class Bot {
	private final String configurationDirectoryPath;

	private JDA jda;

	public static void main(String[] args) {
		registerCommands();
		new Bot(args[0]);
	}
	private static void registerCommands() {
		Command.register(new DateNow());
		Command.register(new IngameDay());
		Command.register(new IngameSeason());
		Command.register(new IngameLightLevel());
		Command.register(new IngameWeather());
		Command.register(new IngameTemperarture());
		Command.register(new IngameTime());
		Command.register(new PlayerName());
		Command.register(new Storage());
		Command.register(new Shutdown());
		Command.register(new CreateCharacter());
		Command.register(new CancelCharacter());
	}


	private Bot(String configurationDirectoryPath) {
		this.configurationDirectoryPath = configurationDirectoryPath;
		try {
			init(getJson(new File(configurationDirectoryPath, "botinfo.json")));
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}

		File welcomeMessageConfigurationFile = new File(configurationDirectoryPath, "welcomemessage.json");

		if(welcomeMessageConfigurationFile.exists()) {
			try {
				WelcomeMessenger.init(getJson(welcomeMessageConfigurationFile));
			} catch (Exception e) {
				System.out.println("No welcome message configuration found.");
			}
		}

		GameManager.setInstance(configurationDirectoryPath);

		registerRepeatedMessages();

		try {
			loadCharacterAttributesAndQuestions(new File(configurationDirectoryPath, "charactergeneration.json"));
		} catch (Exception e) {
			System.out.println("Could not load charactergeneration.json");
			e.printStackTrace();
		}
	}

	private void loadCharacterAttributesAndQuestions(File file) throws IOException, ParseException {
		if(file.exists()) {
			JSONArray json = (JSONArray) getJson(file).get("sheet");

			List<String> attributes = new LinkedList<>();
			List<String> questions = new LinkedList<>();

			for (int i = 0; i < json.size(); i++) {
				JSONObject current = (JSONObject) json.get(i);

				attributes.add((String) current.get("name"));
				questions.add((String) current.get("question"));
			}

			Character.setSheetAttributes(attributes);
			Character.setSheetQuestions(questions);
		}
	}

	private void init(JSONObject params) throws LoginException, InterruptedException, IOException {
		JDABuilder builder = JDABuilder.createDefault((String) params.get("token"));

		builder.disableCache(CacheFlag.MEMBER_OVERRIDES, CacheFlag.VOICE_STATE);
		builder.setBulkDeleteSplittingEnabled(false);
		builder.setCompression(Compression.NONE);
		builder.enableIntents(GatewayIntent.GUILD_MEMBERS);

		File autogeneratedConfig = new File(configurationDirectoryPath, ".autogenerated");
		if(!autogeneratedConfig.exists()) {
			Files.createDirectory(autogeneratedConfig.toPath());
		}

		if (params.get("playing") != null) {
			builder.setActivity(Activity.playing((String) params.get("playing")));
		} else if (params.get("listening") != null) {
			builder.setActivity(Activity.playing((String) params.get("listening")));
		} else if (params.get("streaming") != null) {
			builder.setActivity(Activity.playing((String) params.get("streaming")));
		} else if (params.get("watching") != null) {
			builder.setActivity(Activity.playing((String) params.get("watching")));
		}

		jda = builder.build();

		jda.addEventListener(PlayerManager.createInstance(new File(autogeneratedConfig.getPath(), "players.json"), jda), new CommandManager(), new StorageManager(new File(autogeneratedConfig.getPath(), "storage.json")));

		jda.awaitReady();
	}

	private void registerRepeatedMessages() {
		File messagesDirectory = new File(configurationDirectoryPath, "RepeatedMessages");
		if (messagesDirectory.exists()) {
			for (File messageFile : messagesDirectory.listFiles()) {
				loadRepeatedMessageFromFile(messageFile);
			}
		}
	}
	private void loadRepeatedMessageFromFile(File file) {
		try {
			JSONObject json = getJson(file);
			loadRepeatedMessageFromJSON(json);
		} catch (Exception e) {
			System.out.println("Could not load RepeatedMessage at " + file.getPath());
			e.printStackTrace();
		}
	}
	private void loadRepeatedMessageFromJSON(JSONObject json) throws java.text.ParseException {
		TextChannel channel = jda.getTextChannelById((Long) json.get("channel"));
		Date startAt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse((String) json.get("startAt"));
		long timeDelta = (long) json.get("timeDelta");

		String message = (String) json.get("message");
		JSONArray valuesJSON = (JSONArray) json.get("values");
		String[] values = new String[valuesJSON.size()];
		for (int i = 0; i < values.length; i++) {
			values[i] = (String) valuesJSON.get(i);
		}

		MessageFormatter<GeneralContext> messageFormatter = new MessageFormatter<GeneralContext>(message, values);
		new RepeatedMessage(channel, messageFormatter, startAt, timeDelta);
	}
}