package com.github.NikBenson.RoleplayBot.configurations;

import com.github.NikBenson.RoleplayBot.commands.context.Context;
import com.github.NikBenson.RoleplayBot.messages.MessageFormatter;
import com.github.NikBenson.RoleplayBot.messages.RepeatedMessage;
import com.github.NikBenson.RoleplayBot.messages.WelcomeMessenger;
import com.github.NikBenson.RoleplayBot.roleplay.*;
import com.github.NikBenson.RoleplayBot.roleplay.character.*;
import com.github.NikBenson.RoleplayBot.users.PlayerManager;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.TextChannel;
import org.jetbrains.annotations.NotNull;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class ConfigurationManager {
	private static ConfigurationManager instance;

	public static ConfigurationManager setInstance(JDA jda, String configurationRootPath) throws IOException {
		instance = new ConfigurationManager(jda, configurationRootPath);

		return  getInstance();
	}
	public static ConfigurationManager getInstance() {
		return instance;
	}

	public static JSONObject readJsonFromFile(@NotNull File file) throws IOException, ParseException {
		String jsonString = Files.readString(Path.of(file.getPath()));

		return (JSONObject) new JSONParser().parse(jsonString);
	}

	private final JDA jda;

	private final String configurationRootPath;
	private final String autogeneratedConfigurationRootPath;

	private final List<JSONConfigured> allConfigured = new LinkedList<>();


	private ConfigurationManager(JDA jda, String configurationRootPath) throws IOException {
		this.jda = jda;

		this.configurationRootPath = configurationRootPath;
		autogeneratedConfigurationRootPath = getAndCreateAutogeneratedConfigRoot();
	}

	private String getAndCreateAutogeneratedConfigRoot() throws IOException {
		File autogeneratedConfig = new File(configurationRootPath, ConfigurationPaths.Autogenerated.ROOT);
		if(!autogeneratedConfig.exists()) {
			Files.createDirectory(autogeneratedConfig.toPath());
		}

		return autogeneratedConfig.getPath();
	}

	public void loadDefault() {
		GameManager.getInstanceOrCreate();
		SheetBlueprint.getInstanceOrCreate();
		TeamsManager.createInstance(jda);
		PlayerManager.createInstance(jda);
		WelcomeMessenger.getInstanceOrCreate();
		StorageManager.createInstance(jda);
		registerRepeatedMessages();
	}

	private void registerRepeatedMessages() {
		File messagesDirectory = new File(configurationRootPath, ConfigurationPaths.REPEATED_MESSAGES_DIRECTORY);
		System.out.println(messagesDirectory.getPath());
		if (messagesDirectory.exists()) {
			for (File messageFile : messagesDirectory.listFiles()) {
				System.out.println(messageFile.getPath());

				loadRepeatedMessageFromFile(messageFile);
			}
		}
	}
	private void loadRepeatedMessageFromFile(File file) {
		try {
			JSONObject json = readJsonFromFile(file);
			loadRepeatedMessageFromJSON(json);
		} catch (Exception e) {
			System.out.println("Could not load RepeatedMessage at " + file.getPath());
			e.printStackTrace();
		}
	}
	private void loadRepeatedMessageFromJSON(JSONObject json) throws java.text.ParseException {
		//TODO channel == null
		TextChannel channel = jda.getTextChannelById((Long) json.get("channel"));
		Date startAt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse((String) json.get("startAt"));
		long timeDelta = (long) json.get("timeDelta");

		String message = (String) json.get("message");
		JSONArray valuesJSON = (JSONArray) json.get("values");
		String[] values = new String[valuesJSON.size()];
		for (int i = 0; i < values.length; i++) {
			values[i] = (String) valuesJSON.get(i);
		}

		MessageFormatter<Context> messageFormatter = new MessageFormatter<>(message, values);
		new RepeatedMessage(channel, messageFormatter, startAt, timeDelta);
	}

	public void registerConfiguration(JSONConfigured jsonConfigured) {
		allConfigured.add(jsonConfigured);
	}

	public String getConfigurationRootPath() {
		return configurationRootPath;
	}
	public String getAutogeneratedConfigurationRootPath() {
		return autogeneratedConfigurationRootPath;
	}

	public void loadAll() {
		for(JSONConfigured configured : allConfigured) {
			try {
				load(configured);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void load(JSONConfigured loadable) throws IOException, ParseException {
		loadable.loadFromJSON(readJsonFromFile(loadable.getConfigPath()));
	}

	public void saveAll() {
		for(JSONConfigured configured : allConfigured) {
			try {
				save(configured);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void save(JSONConfigured savable) throws IOException {
		JSONObject json = savable.getJSON();

		if(json != null) {

			File file = savable.getConfigPath();
			if (!file.exists()) {
				file.createNewFile();
			}

			Files.writeString(file.toPath(), json.toJSONString());
		}
	}
}
