package com.github.NikBenson.RoleplayBot.json;

import com.github.NikBenson.RoleplayBot.commands.context.Context;
import com.github.NikBenson.RoleplayBot.messages.MessageFormatter;
import com.github.NikBenson.RoleplayBot.messages.RepeatedMessage;
import com.github.NikBenson.RoleplayBot.messages.WelcomeMessenger;
import com.github.NikBenson.RoleplayBot.roleplay.*;
import com.github.NikBenson.RoleplayBot.roleplay.Character;
import com.github.NikBenson.RoleplayBot.serverCommands.CommandManager;
import com.github.NikBenson.RoleplayBot.users.PlayerManager;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.TextChannel;
import org.jetbrains.annotations.NotNull;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class ConfigLoader {
	public static JSONObject readJsonFromFile(@NotNull File file) throws IOException, ParseException {
		String jsonString = Files.readString(Path.of(file.getPath()));

		return (JSONObject) new JSONParser().parse(jsonString);
	}

	private final JDA JDA;

	private final String configurationRootPath;
	private final String autogeneratedConfigurationRootPath;


	public ConfigLoader(JDA jda, String configurationRootPath) throws IOException, ParseException {
		JDA = jda;
		this.configurationRootPath = configurationRootPath;

		File autogeneratedConfig = new File(configurationRootPath, ConfigurationPaths.Autogenerated.ROOT);
		if(!autogeneratedConfig.exists()) {
			Files.createDirectory(autogeneratedConfig.toPath());
		}
		autogeneratedConfigurationRootPath = autogeneratedConfig.getPath();

		load();
	}

	public void load() throws IOException, ParseException {
		registerEventListeners();
		GameManager.setInstance(configurationRootPath);
		loadWelcomeMessage();
		loadTeams();
		loadPlayers();
		PlayerManager.createInstance(new File(autogeneratedConfigurationRootPath, ConfigurationPaths.Autogenerated.PLAYERS_FILE), JDA);
	}

	private void registerEventListeners() {
		JDA.addEventListener(new CommandManager(), new StorageManager(new File(autogeneratedConfigurationRootPath, ConfigurationPaths.Autogenerated.STORAGE_FILE)));

	}

	private void loadWelcomeMessage() throws IOException, ParseException {
		File welcomeMessageConfigurationFile = new File(configurationRootPath, ConfigurationPaths.WELCOME_MESSAGE_FILE);

		if(welcomeMessageConfigurationFile.exists()) {
			WelcomeMessenger.init(readJsonFromFile(welcomeMessageConfigurationFile));
		}
	}

	private void loadPlayers() throws IOException, ParseException {
		File file = new File(configurationRootPath, ConfigurationPaths.CHARACTER_GENERATION_FILE);

			if(file.exists()) {
				JSONObject json = readJsonFromFile(file);
				JSONArray sheet = (JSONArray) json.get("sheet");

				List<String> attributes = new LinkedList<>();
				List<String> questions = new LinkedList<>();

				for (int i = 0; i < sheet.size(); i++) {
					JSONObject current = (JSONObject) sheet.get(i);

					attributes.add((String) current.get("name"));
					questions.add((String) current.get("question"));
				}

				Character.setSheetAttributes(attributes);
				Character.setSheetQuestions(questions);

				List<String> skills = (JSONArray) json.get("skills");

				Skills.setAllSkills(skills);
			}
	}
	private boolean loadTeams() throws IOException, ParseException {
		File file = new File(configurationRootPath, ConfigurationPaths.TEAMS_FILE);

		if(file.exists()) {
			JSONObject json = readJsonFromFile(file);

			Team.setQuestion((String) json.get("question"));

			JSONArray teams = (JSONArray) json.get("teams");

			for (int i = 0; i < teams.size(); i++) {
				new Team((JSONObject) teams.get(i), JDA);
			}

			return true;
		}

		return false;
	}

	private void registerRepeatedMessages() {
		File messagesDirectory = new File(configurationRootPath, ConfigurationPaths.REPEATED_MESSAGES_DIRECTORY);
		if (messagesDirectory.exists()) {
			for (File messageFile : messagesDirectory.listFiles()) {
				loadRepeatedMessageFromFile(messageFile);
			}
		}
	}
	private void loadRepeatedMessageFromFile(File file) {
		try {
			JSONObject json = readJsonFromFile(file);
			loadRepeatedMessageFromJSON(json);
		} catch (Exception e) {
			System.out.println("Could not load RepeatedMessage at " + file.getPath());
			e.printStackTrace();
		}
	}
	private void loadRepeatedMessageFromJSON(JSONObject json) throws java.text.ParseException {
		TextChannel channel = JDA.getTextChannelById((Long) json.get("channel"));
		Date startAt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse((String) json.get("startAt"));
		long timeDelta = (long) json.get("timeDelta");

		String message = (String) json.get("message");
		JSONArray valuesJSON = (JSONArray) json.get("values");
		String[] values = new String[valuesJSON.size()];
		for (int i = 0; i < values.length; i++) {
			values[i] = (String) valuesJSON.get(i);
		}

		MessageFormatter<Context> messageFormatter = new MessageFormatter<>(message, values);
		new RepeatedMessage(channel, messageFormatter, startAt, timeDelta);
	}

	public void save() {
		//TODO move from events
	}
}
